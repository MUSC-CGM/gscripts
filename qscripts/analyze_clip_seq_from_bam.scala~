package org.broadinstitute.sting.queue.qscripts

import org.broadinstitute.sting.queue.QScript
import org.broadinstitute.sting.queue.util.QScriptUtils
import net.sf.samtools.SAMFileHeader.SortOrder
import org.broadinstitute.sting.utils.exceptions.UserException
import org.broadinstitute.sting.commandline.Hidden
import org.broadinstitute.sting.queue.extensions.picard.{ ReorderSam, SortSam, AddOrReplaceReadGroups, MarkDuplicates }
import org.broadinstitute.sting.queue.extensions.gatk._
import org.broadinstitute.sting.queue.extensions.yeo._
class AnalizeCLIPSeq extends QScript {
  // Script argunment
  @Input(doc = "input file")
  var input: File = _

  @Argument(doc = "species (hg19...)")
  var genome: String = _
  
  @Argument(doc = "RBP binding modality is premRNA")
  var premRNA: Boolean = false

  @Argument(doc = "enable superlocal threshold")
  var superlocal: Boolean = false
   
  case class clipper(in: File, out: File, genome: String, isPremRNA: Boolean ) extends Clipper {

       this.inBam = in
       this.outBed = out
       this.species = genome
       this.premRNA = isPremRNA
       this.superlocal = superlocal
  }
  
  case class addOrReplaceReadGroups(inBam : File, outBam : File) extends AddOrReplaceReadGroups {
       override def shortDescription = "AddOrReplaceReadGroups"
       this.input = List(inBam)
       this.output = outBam
       this.RGLB = "foo" //should record library id
       this.RGPL = "illumina"
       this.RGPU = "bar" //can record barcode information (once I get bardoding figured out)
       this.RGSM = "baz"
       this.RGCN = "Biogem" //need to add switch between biogem and singapore
       this.RGID = "1"
  } 

  case class genomeCoverageBed(input: File, outBed : File, cur_strand : String, chr_sizes: File) extends GenomeCoverageBed {
        this.inBam = input
        this.genomeSize = chr_sizes
        this.bedGraph = outBed
        this.strand = cur_strand
        this.split = true
  }

  
  class FixScores(@Input inBed: File, @Output outBed: File) extends CommandLineFunction {
  override def shortDescription = "FixScores"
  def commandLine = "python ~/gscripts/gscripts/clipseq/fix_scores.py " +
    required("--bed", inBed) +
    required("--out_file", outBed)
    this.isIntermediate = true
  }

  def gffDbLocation(genome: String) : String = {
  //Returns star genome Location for TSCC, could eventually be factored out into conf file
   
   var retval = "none"
   if (genome == "hg19") {
      retval = "/projects/ps-yeolab/genomes/hg19/gencode.v17.annotation.gtf.db" 
   }else if(genome == "mm9") {
      retval = "/projects/ps-yeolab/genomes/mm9/Mus_musculus.NCBIM37.64.fixed.gtf.db" 
   }
   
   retval
  }

  def chromSizeLocation(genome: String) : String = {
  //Returns star genome Location for TSCC, could eventually be factored out into conf file
   
   var retval = "none"
   if (genome == "hg19") {
      retval = "/projects/ps-yeolab/genomes/hg19/hg19.chrom.sizes" 
   }else if(genome == "mm9") {
      retval = "/projects/ps-yeolab/genomes/mm9/mm9.chrom.sizes"
   }
   
   retval
  }

  def regionsLocation(genome: String) : String = {
  //Returns star genome Location for TSCC, could eventually be factored out into conf file
   
   var retval = "none"
   if (genome == "hg19") {
      retval = "/projects/ps-yeolab/genomes/hg19/hg19data4" 
   }else if(genome == "mm9") {
      retval = "/projects/ps-yeolab/genomes/mm9/mm9data4"
   }
   
   retval
  }

  def asStructureLocation(genome: String) : String = {
  //Returns star genome Location for TSCC, could eventually be factored out into conf file
   
   var retval = "none"
   if (genome == "hg19") {
      retval = "/projects/ps-yeolab/genomes/hg19/hg19data4" 
   }else if(genome == "mm9") {
      retval = "/projects/ps-yeolab/genomes/mm9/mm9data4"
   }
   
   retval
  }

  def genomeLocation(genome: String) : String = {
  //Returns star genome Location for TSCC, could eventually be factored out into conf file
   
   var retval = "none"
   if (genome == "hg19") {
      retval = "/projects/ps-yeolab/genomes/hg19/chromosomes/all.fa" 
   }else if(genome == "mm9") {
      retval = "/projects/ps-yeolab/genomes/mm9/chromosomes/all.fa" 
   }
   
   retval
  }

  def phastconsLocation(genome: String) : String = {
  //Returns star genome Location for TSCC, could eventually be factored out into conf file
   
   var retval = "none"
   if (genome == "hg19") {
      retval = "/projects/ps-yeolab/genomes/hg19/hg19_phastcons.bw" 
   }else if(genome == "mm9") {
      retval = "/projects/ps-yeolab/genomes/mm9/mm9_phastcons.bw" 
   }

   retval
  }

  def script() {


    val fileList = QScriptUtils.createArgsFromFile(input)
    var trackHubFiles: List[File] = List()

    for (item : Tuple2[File, String] <- fileList) {
      var rmDupedBamFile: File = item._1
      var genome: String = item._2

    for (rmDupedBamFile: File <- fileList) {

      val rmDupedMetricsFile = swapExt(rmDupedBamFile, ".bam", ".metrics")

      val bedGraphFilePos = swapExt(rmDupedBamFile, ".bam", ".pos.bg")
      val bigWigFilePos = swapExt(bedGraphFilePos, ".bg", ".bw")

      val bedGraphFileNeg = swapExt(rmDupedBamFile, ".bam", ".neg.bg")
      val bedGraphFileNegInverted = swapExt(bedGraphFileNeg, "neg.bg", "neg.t.bg")
      val bigWigFileNeg = swapExt(bedGraphFileNegInverted, ".t.bg", ".bw")

      val clipper_output = swapExt(rmDupedBamFile, ".bam", ".peaks.bed")
      val fixed_clipper_output = swapExt(clipper_output, ".bed", ".fixed.bed")

      val bigBed_output = swapExt(clipper_output, ".bed", ".bb")
      val clipper_output_metrics = swapExt(clipper_output, ".bed", ".metrics")

      val IDRResult = swapExt(rmDupedBamFile, "", ".IDR")

      //add bw files to list for printing out later
      trackHubFiles = trackHubFiles ++ List(bedGraphFileNegInverted, bigWigFilePos)
      trackHubFiles = trackHubFiles ++ List(bigBed_output)
      add(new genomeCoverageBed(input = rmDupedBamFile, outBed = bedGraphFilePos, cur_strand = "+", chromSizeLocation(genome)))
      add(new BedGraphToBigWig(bedGraphFilePos, chromSizeLocation(genome), bigWigFilePos))

      add(new genomeCoverageBed(input = rmDupedBamFile, outBed = bedGraphFileNeg, cur_strand = "-", chromSizeLocation(genome)))
      add(new NegBedGraph(inBedGraph = bedGraphFileNeg, outBedGraph = bedGraphFileNegInverted))
      add(new BedGraphToBigWig(bedGraphFileNegInverted, chromSizeLocation(genome), bigWigFileNeg))

      add(clipper(in = rmDupedBamFile, out = clipper_output, genome = genome, isPremRNA = premRNA))

      add(new FixScores(inBed = clipper_output, outBed = fixed_clipper_output))

      add(new BedToBigBed(inBed = fixed_clipper_output, genomeSize = chromSizeLocation(genome), outBigBed = bigBed_output))

      add(new ClipAnalysis(rmDupedBamFile, clipper_output, genome, clipper_output_metrics, regions_location = regionsLocation(genome),
                           AS_Structure = asStructureLocation(genome), genome_location = genomeLocation(genome), 
                           phastcons_location = phastconsLocation(genome), gff_db = gffDbLocation(genome),
                           bw_pos=bigWigFilePos, bw_neg=bigWigFileNeg))



//      add(new IDR(inBam = rmDupedBamFile, species = species, genome = chr_sizes, outResult = IDRResult, premRNA = premRNA))

    }
  }
}





