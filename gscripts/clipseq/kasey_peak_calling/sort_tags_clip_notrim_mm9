#!/usr/bin/perl
#use strict;
use warnings;
use POSIX;
# Initialize variables

#$lane = $ARGV[0];
#$window = $ARGV[1];
#$target_pval = 0.00001;
#$inputfile = "s_".$lane."_eland_bed";
#$outputfile = "s_".$lane."_sorted_bed_trim";
$inputfile = $ARGV[0];
$outputfile = $ARGV[1];
# Open sequence file (can be very large)
open(FINISHED, ">$outputfile");
#my @chr_array = ('chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chrX', 'chrY');
#my @chr_array = ('chrY');

my @chr_array = ('chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chrX', 'chrY');

if ($outputfile =~ /.*\/(.+\.BED)/) {
	$outname = $1;
} else {
	$outname = $outputfile;
}
print FINISHED "track name=".$outname." description=".$outname." visibility=2 itemRgb=\"On\" useScore=1\n";
foreach $chr_input (@chr_array) {
	print "$chr_input\n";
	@list = ();
	%strand = ();
	$count = 0;
	open(GET_DATA, "< $inputfile") or die "cannot open $inputfile : $!\n";
#	$chr_size = $chr_max{$chr_input};
#	$genome_size += $chr_size;
	#$line = <GET_DATA>;
	while(defined($line = <GET_DATA>)) {
		if ($line =~ /^track/) {} else {
		chomp $line;
		@a = split(/\t/, $line);
		$chr = $a[0];
		$start = $a[1];
		$end = $a[2];
		#$loc = floor(($start + $end)/2);
		#$size = $end-$start;
		$direction = $a[5];
#		if ($a[5] eq "+") {
#			$direction = 0;
#		} else {
#			$direction = 1;
#		}
		if ($chr eq $chr_input) {
			#print "$count\t$chr\t$line\n";
			#$count++;
			#$loc = floor(($a[1]+$a[2])/2);
			$strand{$start}->{$end}->{$direction}->[0] += 1;
			$strand{$start}->{$end}->{$direction}->[1] = $line;
			push (@list, $start);
#			if (exists($strand{$start}->{$end}->{$direction})) {
#				#$this_size = $size_hash{$start}->{$end}->[$direction];
#				#if ($size > $this_size) {
#				#	$strand{$start}->[$direction] = $line;
#				#	$size_hash{$start}->[$direction] = $size;
#				#}
#				push (@list, $loc);
#			} else {
#				$strand{$start}->{$end}->{$direction} = $line;
#				#$size_hash{$start}->{$end}->[$direction] = $size;
#				push (@list, $loc);
#				
#				#$count++;
#			}
			$total_tags++;
			
			
		}
		}
	}
	@sorted = sort {$a <=> $b} @list;
	$current_loc = 0;
	for ($i = 0; $i <= $#sorted; $i++) {
		$start = $sorted[$i];	
		if ($start != $current_loc) {
			foreach $end ( keys %{$strand{$start}}) {
				if (exists($strand{$start}->{$end}->{"+"})) {
					$count = $strand{$start}->{$end}->{"+"}->[0];
					#print "$count\n";
					$line = $strand{$start}->{$end}->{"+"}->[1];
					for ($j = 1; $j <= $count; $j++) {
						print FINISHED "$line\n";
					}
					#$countf = $strand{$loc}->[0];
					#for ($j = 0; $j < $countf; $j++) {
					#	print FINISHED "$chr_input\t$loc\t0\n";
					#}
					$trim_tags++;
				}
				if (exists($strand{$start}->{$end}->{"-"})) {
					$count = $strand{$start}->{$end}->{"-"}->[0];
					#print "$count\n";
					$line = $strand{$start}->{$end}->{"-"}->[1];
					for ($j = 1; $j <= $count; $j++) {
						print FINISHED "$line\n";
					}
					#$countf = $strand{$loc}->[0];
					#for ($j = 0; $j < $countf; $j++) {
					#	print FINISHED "$chr_input\t$loc\t0\n";
					#}
					$trim_tags++;
				}
			}
			$current_loc = $start;
		}
		
		
	}
	#$this_size += $#list;
	close (GET_DATA);
}
close (FINISHED);
#$correct_gsize = $genome_size - $N_size - $rep10_size;
#$windowed_gsize = $correct_gsize/$window;
#$frequency = $total_tags/$windowed_gsize;
print "Total tags = $total_tags\n";
#print "Frequency per $window = $frequency\n";
#$this_size = $#list;
print "This tags = $trim_tags\n";

close (GET_DATA);
close (FINISHED);



exit;

sub gammln {
	my $x = shift;
	my $y = $x;
	my @cof = (76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5);
	my $tmp = $x + 5.5;
	$tmp -= ($x+0.5)*log($tmp);
	my $ser = 1.000000000190015;
	for (my $j = 0; $j <= 5; $j++) {
		$ser += ($cof[$j])/(++$y);
	}
	return -$tmp+log(2.506622746310005*$ser/$x);
}

sub factln {
	my @a = ();
	my $n = shift;
	if ($n < 0) {
		print "Negative factorial\n";
	}
	if ($n <= 1) {
		return 0;
	}
	if ($n <= 100) {
		return $a[$n] ? $a[$n] : ($a[$n] = gammln($n+1));
	} else {
		return gammln($n+1);
	}
}

sub poisln {
	my $freq = $_[0];
	my $target = $_[1];
	my $logfreq = log($freq);
	my $totalp = 0;
	for ($i = $target; $i >= 0; $i--) {
		$lni = factln($i);
		$lnp = $i * $logfreq - $freq - $lni;
		$p = exp($lnp);
		$totalp += $p;
	}
	$inverse = 1-$totalp;
	return $inverse;
}

sub pois {
	my $f = $_[0];
	my $t = $_[1];
	my $tp = 0;
	$s1 = exp(-1 * $f);
	
	for ($i = $t; $i >= 0; $i--) {
		$s2 = $f ** $i;
		$s3 = factorial($i);
		$p1 = ($s1 * $s2)/$s3;
		$tp = $tp+$p1;
	}
	$inverse = 1-$tp;
	return $inverse;
}

sub factorial {
	$s = 1;
	$r = 1;
	$input = $_[0];
	while ($s <= $input) {
		$r *= $s;
		$s++;
	}
	if ($input == 0) {
		$r = 1;
	}
return $r;
}
