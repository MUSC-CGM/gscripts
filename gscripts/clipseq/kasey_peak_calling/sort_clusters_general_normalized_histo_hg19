#!/usr/bin/perl
#use strict;
use warnings;
use POSIX;
# Initialize variables

#$lane = $ARGV[0];
#$window = $ARGV[1];
#$target_pval = 0.00001;
#$annotfile = "clusterid_location_mm8";
$dir = $ARGV[7];

$mRNA = $ARGV[2];
if ($mRNA == 0) {
	$annotfile = $dir."clusterid_location_hg19.pre";
} else {
	$annotfile = $dir."clusterid_location_hg19";
}


$annotfile2 = $ARGV[3];
$inputfile = $ARGV[0];
#$bin = 10;
$outputfile = $ARGV[1];
#$outputfile2 = $outputfile."_int";
$upstream_window = $ARGV[4];
$downstream_window = $ARGV[5];
$total_window_size = $upstream_window + $downstream_window;
$bin = floor($total_window_size/100);
$target_edge = $ARGV[6];
#$inputfile = "LIN28_ES_comb.ingenes.BED";
#$outputfile = "LIN28_ES_comb_ingenes_sorted";
#$outputfile2 = $inputfile."_ingenes_histo";
# Open sequence file (can be very large)
open(FINISHED, ">$outputfile");
#open(FINISHED2, ">$outputfile2");
open(ANNOT_DATA, "< $annotfile") or die "cannot open $annotfile : $!\n";
while(defined($line = <ANNOT_DATA>)) {
	chomp $line;
	@a = split(/\t/, $line);
	$chr = $a[0];
	$start = $a[1];
	$end = $a[2];
	$direction = $a[3];
	$id = $a[4];
	$size = $a[5];
	$id_annotation{$id}->[0] = $chr;
	$id_annotation{$id}->[1] = $start;
	$id_annotation{$id}->[2] = $end;
	$id_annotation{$id}->[3] = $direction;
	$id_annotation{$id}->[4] = $size;
	$id_annotation{$id}->[5] = 1;
}

my @chr_array = ('chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY');

@pos_distribution = ();
@pos_int_distribution = ();
#@neg_distribution = ();
$int_total = 0;
$grand_total = 0;
foreach $chr_input (@chr_array) {
	#$inputfile = "LIN28_ES_comb.".$chr_input.".bowtie";
	#print "$chr_input\n";
	#@list = ();
	@pos_list = ();
	#@neg_list = ();
	#%strand = ();
	open(GET_DATA, "< $inputfile") or die "cannot open $inputfile : $!\n";
	#$chr_size = $chr_max{$chr_input};
	#$genome_size += $chr_size;
	#$line = <GET_DATA>;
	while(defined($line = <GET_DATA>)) {

		chomp $line;
		@a = split(/\t/, $line);
		#@b = split(/\|/, $a[3]);
		#$b[0] =~ /.*\,(\d+)/;
		#$id = $1;
		#$start = $b[1];
		#$end = $b[2];
		$this_chr = $a[0];
		$this_start = $a[1];
		$this_end = $a[2];
		$this_height = $a[3];
		$this_id = $a[5];
		if ($this_chr eq $chr_input) {
			if (exists($id_annotation{$this_id})) {
				#print "trying to add to $id\n";
				$id_annotation{$this_id}->[5] += 1;
				$id_annotation{$this_id}->[6] += $this_height;
			}
		}
		#$loc = floor(($this_start+$this_end)/2);
		#$chr = $id_annotation{$id}->[0];
		#$start = $id_annotation{$id}->[1];
		#$end = $id_annotation{$id}->[2];
		#$id_direction = $id_annotation{$id}->[3];
		#$size = $id_annotation{$id}->[4];
		#$id_size = $end - $start + 1;
		#$this_pos = $a[3];
	}
	close (GET_DATA);

	open(ANNOT_DATA2, "< $annotfile2") or die "cannot open $annotfile2 : $!\n";
	$counter = 0;
	@annot_loc = ();
	while(defined($line = <ANNOT_DATA2>)) {
		chomp $line;
		@a = split(/\t/, $line);
		$chr = $a[0];
		$start = $a[1];
		$end = $a[2];
		$direction = $a[3];
		$id = $a[4];
		#$size = $a[5];
		if ($chr eq $chr_input) {
			if ($target_edge eq 'left') {
				if ($direction == 1) {
					$left = $start - $upstream_window;
					$right = $start + $downstream_window;
				} else {
					$left = $end - $downstream_window;
					$right = $end + $upstream_window;
				}
			} elsif ($target_edge eq 'right') {
				if ($direction == 1) {
					$left = $end - $upstream_window;
					$right = $end + $downstream_window;
				} else {
					$left = $start - $downstream_window;
					$right = $start + $upstream_window;
				}
			}
			#print "$chr\t$left\t$right\t$direction\t$id\n";
			$annot_loc[$counter]->[0] = $chr;
			$annot_loc[$counter]->[1] = $left;
			$annot_loc[$counter]->[2] = $right;
			$annot_loc[$counter]->[3] = $direction;
			$annot_loc[$counter]->[4] = $id;
			$annot_loc[$counter]->[5] = 0;
			$counter++;
		}
		$annot_loc[$counter]->[0] = $chr;
		$annot_loc[$counter]->[1] = 100000000000;
		$annot_loc[$counter]->[2] = 100000000001;
		$annot_loc[$counter]->[3] = 1;
		$annot_loc[$counter]->[4] = 100000000000;
		$annot_loc[$counter]->[5] = 0;
	}





	#$inputfile = "LIN28_ES_comb.".$chr_input.".bowtie";
	#print "$chr_input\n";
	#@list = ();
	@pos_list = ();
	#@neg_list = ();
	#%strand = ();
	open(GET_DATA, "< $inputfile") or die "cannot open $inputfile : $!\n";
	#$chr_size = $chr_max{$chr_input};
	#$genome_size += $chr_size;
	#$line = <GET_DATA>;
	@tag_loc = ();
	$counter = 0;
	while(defined($line = <GET_DATA>)) {

		chomp $line;
		@a = split(/\t/, $line);
		#@b = split(/\|/, $a[3]);
		#$b[0] =~ /.*\,(\d+)/;
		#$id = $1;
		#$start = $b[1];
		#$end = $b[2];
		$this_chr = $a[0];
		if ($this_chr eq $chr_input) {
			
			$this_start = $a[1];
			$this_end = $a[2];
			$this_loc = floor(($this_start+$this_end)/2);
			$this_start = $this_loc - 49;
			$this_end = $this_loc + 50;
			$this_height = $a[3];
			$id = $a[5];
			
			#$tag_loc[$counter]->[0] = $this_chr;
			#$tag_loc[$counter]->[1] = $this_start;
			#$tag_loc[$counter]->[2] = $this_end;
			#$tag_loc[$counter]->[3] = $id;
			if (exists($id_annotation{$id})) {
				#print "here\n";
				#$loc = floor(($this_start+$this_end)/2);
				#$chr = $id_annotation{$id}->[0];
				#$start = $id_annotation{$id}->[1];
				#$end = $id_annotation{$id}->[2];
				$id_direction = $id_annotation{$id}->[3];
				#$size = $id_annotation{$id}->[4];
				#$id_count = $id_annotation{$id}->[5];
				#$id_size = $end - $start + 1;
				$tag_loc[$counter]->[0] = $this_chr;
				$tag_loc[$counter]->[1] = $this_start;
				$tag_loc[$counter]->[2] = $this_end;
				$tag_loc[$counter]->[3] = $id_direction;
				$tag_loc[$counter]->[4] = $id;
				$tag_loc[$counter]->[5] = $this_height;
				$counter++;
			}
		}
		
	}
	$j = 0;
	for ($i = 0; $i <= $#tag_loc; $i++) {
		
		#$tag_chr = $tag_loc[$i]->[0];
		$id_size = $upstream_window + $downstream_window;
		$tag_start = $tag_loc[$i]->[1];
		$tag_end = $tag_loc[$i]->[2];
		#$tag_location = floor(($tag_start+$tag_end)/2);
		#$tag_direction = $tag_loc[$i]->[3];
		#$tag_id = $tag_loc[$i]->[4];
		#$tag_height = $tag_loc[$i]->[5];
		
		
		$annot_chr = $annot_loc[$j]->[0];
		$annot_left = $annot_loc[$j]->[1];
		$annot_right = $annot_loc[$j]->[2];
		$annot_direction = $annot_loc[$j]->[3];
		$annot_id = $annot_loc[$j]->[4];
		
		#$id_count = $id_annotation{$tag_id}->[5];
		#$id_height = $id_annotation{$tag_id}->[6];
		#print "$annot_chr\t$tag_location\t$annot_left\n";
		if ($annot_left) {
			if ((($tag_start > $annot_left) && ($tag_start < $annot_right))||(($tag_end > $annot_left) && ($tag_end < $annot_right))) {
				#print "here\n";
				#$id_size = $upstream_window + $downstream_window;
				#$id_count = $id_annotation{$tag_id}->[5];
				#$id_height = $id_annotation{$tag_id}->[6];
				#print "$annot_direction\n";
				#print "$tag_direction\n";
				#print "$annot_direction\n";
				if ($annot_direction == 1) {
			
					$this_pos = $tag_start - $annot_left;
					$this_stop = $tag_end - $annot_left;
					if ($this_stop > $id_size) {
						$this_stop = $id_size;
					}
				} else {
					$this_pos = $annot_right - $tag_start;
					$this_stop = $annot_right - $tag_end;
					if ($this_stop > $id_size) {
						$this_stop = $id_size;
					}
				}
				#print "$this_pos\t$id_count\t$annot_id\t$tag_id\n";
				while ($this_pos < 0) {
					$this_pos++;
				}
				while ($this_pos <= $this_stop) {
					$pos_distribution[$this_pos] += 1;
					#$pos_int_distribution[$this_pos] += 1/$id_count;
					$pos_int_distribution[$this_pos] += 1;
					$this_pos++;
					$annot_loc[$j]->[5] = 1;
					$grand_total += 1;
					$int_total += 1;
				}
	#			if ($this_pos < 0) {
	#				print "ERROR negative position\n";
	#			} elsif ($this_pos > $id_size) {
	#				print "ERROR exceeding maximum window\n";
	#			} elsif ($id_height >= 10) {
	#				#print "here\n";
	#				$relative_tag_size = $tag_height/$id_height;
	#				$pos_distribution[$this_pos] += $relative_tag_size;
	#				$pos_int_distribution[$this_pos] += 1/$id_count;
	#				$grand_total += $relative_tag_size;
	#				$int_total++;
	#				$annot_loc[$j]->[5] = 1;
	#			
	#			} else {
	#				#print "here\n";
	#				$pos_int_distribution[$this_pos] += 1/$id_count;
	#				$int_total++;
	#				$annot_loc[$j]->[5] = 1;
	#			}
			} elsif (($tag_start > $annot_left) && ($tag_start > $annot_right)) {
				$i--;
				$j++;
				
				$annot_chr = $annot_loc[$j]->[0];
				$annot_left = $annot_loc[$j]->[1];
				$annot_right = $annot_loc[$j]->[2];
				$annot_direction = $annot_loc[$j]->[3];
				$annot_id = $annot_loc[$j]->[4];
				
			}
		}
		
	}
	#$annot_counter = 0;
	#$total_annots = 0;
	#print "$#annot_loc\n";
	for ($j = 0; $j <= $#annot_loc; $j++) {
		$positive = $annot_loc[$j]->[5];
		#print "here\n";
		if ($positive == 1) {
			$annot_counter++;
		}
		$total_annots++;
	}

	
	@tag_loc = ();
	@annot_loc = ();
	close (GET_DATA);
}

print FINISHED "$annot_counter\t$total_annots\n";
print FINISHED "$grand_total\t\t$int_total\n";
for ($i = 0; $i <= $id_size-$bin; $i++) {
	for ($j = 0; $j < $bin; $j++) {
		$counter = $i+$j;
		$pos_count = $pos_distribution[$counter];
		$pos_int = $pos_int_distribution[$counter];
		if ($pos_count) {
		} else {
			$pos_count = 0;
		}
		if ($pos_int) {
		} else {
			$pos_int = 0;
		}
		$pos_subtotal += $pos_count;
		$pos_int_subtotal += $pos_int;
	}
	#print "$i\t$count\n";
	$total_count += $pos_subtotal;
	$total_int_count += $pos_int_subtotal;
	#$neg_count = $neg_distribution[$i];
	#$total_count += $neg_count;
	$start_index = -1*$upstream_window;
	$this_index = $start_index + $i;
	#$pos_net = $pos_subtotal/$grand_total;
	$pos_int_net = $pos_int_subtotal/$int_total;
	print FINISHED "$this_index\t$pos_subtotal\t$pos_int_net\n";
	$i += $j-1;
	$pos_subtotal = 0;
	$pos_int_subtotal = 0;
}
close (FINISHED);

#print "$total_count summed fractions\n";
print "$inputfile done with $total_count summed height fractions and $total_int_count summed peak fractions\n";
exit;

sub gammln {
	my $x = shift;
	my $y = $x;
	my @cof = (76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5);
	my $tmp = $x + 5.5;
	$tmp -= ($x+0.5)*log($tmp);
	my $ser = 1.000000000190015;
	for (my $j = 0; $j <= 5; $j++) {
		$ser += ($cof[$j])/(++$y);
	}
	return -$tmp+log(2.506622746310005*$ser/$x);
}

sub factln {
	my @a = ();
	my $n = shift;
	if ($n < 0) {
		print "Negative factorial\n";
	}
	if ($n <= 1) {
		return 0;
	}
	if ($n <= 100) {
		return $a[$n] ? $a[$n] : ($a[$n] = gammln($n+1));
	} else {
		return gammln($n+1);
	}
}

sub poisln {
	my $freq = $_[0];
	my $target = $_[1];
	my $logfreq = log($freq);
	my $totalp = 0;
	for ($i = $target; $i >= 0; $i--) {
		$lni = factln($i);
		$lnp = $i * $logfreq - $freq - $lni;
		$p = exp($lnp);
		$totalp += $p;
	}
	$inverse = 1-$totalp;
	return $inverse;
}

sub pois {
	my $f = $_[0];
	my $t = $_[1];
	my $tp = 0;
	$s1 = exp(-1 * $f);
	
	for ($i = $t; $i >= 0; $i--) {
		$s2 = $f ** $i;
		$s3 = factorial($i);
		$p1 = ($s1 * $s2)/$s3;
		$tp = $tp+$p1;
	}
	$inverse = 1-$tp;
	return $inverse;
}

sub factorial {
	$s = 1;
	$r = 1;
	$input = $_[0];
	while ($s <= $input) {
		$r *= $s;
		$s++;
	}
	if ($input == 0) {
		$r = 1;
	}
return $r;
}
