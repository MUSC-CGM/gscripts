#!/usr/bin/perl
#use strict;
use warnings;
use POSIX;
# Initialize variables

#$lane = $ARGV[0];
#$window = $ARGV[1];
#$window = 100;
#$target_pval = 0.05;
#$bonf_active = 0;
#$target_pval = 0.01;
#$tag_corr = 1;
#$cutoff_corr = 1;
$tag_window = 1000;
$dir = $ARGV[9];

#$inputfile = "s_".$lane."_eland_bed";
$inputfile = $ARGV[0];
$outputfile = $ARGV[1];
$window = $ARGV[2];
$target_pval = $ARGV[3];
$bonf_active = $ARGV[4];
my $range_limit = $ARGV[5];
my $diff_limit = $ARGV[6];
my $mRNA = $ARGV[7];

#print STDERR "arguments are @ARGV\n";
#print "$mRNA\n";
if ($mRNA == 0) {
	$annotfile = $dir."clusterid_location_hg18.pre";
} else {
	$annotfile = $dir."clusterid_location_hg18";
}



#$max_window = $ARGV[5];
if ($bonf_active == 0) {
	$annot = $window."_uncorrected";
} else {
	$annot = $window;
}
#$inputfile = "HnRNPU_293T_ingenes_sorted_hg18";
#$outputfile = "HnRNPU_293T_ingenes_clusters_hg18";
$outputfile2 = $outputfile.$annot.".bed"; #"HnRNPU_293T_ingenes_clusters_hg18_bed";
# Open sequence file (can be very large)
open(ANNOT_DATA, "< $annotfile") or die "cannot open $annotfile : $!\n";
open(FINISHED, ">$outputfile");
open(FINISHED2, ">$outputfile2");
my $output_annotation = $ARGV[8];
print FINISHED2 "#$output_annotation\n";
if ($outputfile =~ /.*\/+(.*)/) {
	$outname = $1;
} else {
	$outname = $outputfile2;
}


print FINISHED2 "track name=$outname description=$outname visibility=2 itemRgb=\"On\" useScore=1\n";
my @chr_array = ('chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY');

#my @chr_array = ('chr20');

$chr_max{"chr1"} = 247249719;
$chr_max{"chr2"} = 242951149;
$chr_max{"chr3"} = 199501827;
$chr_max{"chr4"} = 191273063;
$chr_max{"chr5"} = 180857866;
$chr_max{"chr6"} = 170899992;
$chr_max{"chr7"} = 158821424;
$chr_max{"chr8"} = 146274826;
$chr_max{"chr9"} = 140273252;
$chr_max{"chr10"} = 135374737;
$chr_max{"chr11"} = 134452384;
$chr_max{"chr12"} = 132349534;
$chr_max{"chr13"} = 114142980;
$chr_max{"chr14"} = 106368585;
$chr_max{"chr15"} = 100338915;
$chr_max{"chr16"} = 88827254;
$chr_max{"chr17"} = 78774742;
$chr_max{"chr18"} = 76117153;
$chr_max{"chr19"} = 63811651;
$chr_max{"chr20"} = 62435964;
$chr_max{"chr21"} = 46944323;
$chr_max{"chr22"} = 49691432;
$chr_max{"chrX"} = 154913754;
$chr_max{"chrY"} = 57772954;

foreach $chr_input (@chr_array) {
	$chr_size = $chr_max{$chr_input};
	$genome_size += $chr_size;
}

$N_size = 222406391;
#$rep5_size = 74048982;
$rep10_size = 273864903;

while(defined($line = <ANNOT_DATA>)) {
	if ($line =~ /\S*/) {
		chomp $line;
		@a = split(/\t/, $line);
		#$id = $a[4];
		$direction = $a[3];
		#$size = $a[5];
		#$id2size{$id} = $size;
		#$id2direction{$id} = $direction;
		#$total_size += $size;
	}
}
close (ANNOT_DATA);

open(GET_DATA, "< $inputfile") or die "cannot open $inputfile : $!\n";
while(defined($line = <GET_DATA>)) {
	chomp $line;
	@a = split(/\t/, $line);
	#$id = $a[3];		
	#$id2tagcount{$id}++;
	$total_tags++;
}
close (GET_DATA);
#$correct_gsize = $total_size;
$correct_gsize = $genome_size - $N_size - $rep10_size;
$windowed_gsize = $correct_gsize/$window;
if ($bonf_active == 1) {
	$new_target_pval = $target_pval/$windowed_gsize;
} else {
	$new_target_pval = $target_pval;
}


#$correct_gsize = $genome_size - $N_size - $rep10_size;

print "Total tags = $total_tags\n";
$frequency = $total_tags/$windowed_gsize;
$pval = 1;
$this_tag_num = 0;

while ($pval >= $new_target_pval) {
	$this_tag_num++;
	#$pval = poisln($frequency, $this_tag_num);
	$pval = pois($frequency, $this_tag_num);
	#$pval = exp($lnpval);
}

$pval = pois($frequency, $this_tag_num);

print "Using $this_tag_num as cutoff, has pvalue of $pval\n";
#$pval = poisln($frequency, $this_tag_num+1);
$new_pval = pois($frequency, $this_tag_num+1);
print "Next cutoff has pvalue of $new_pval\n";
if ($this_tag_num == 1) {
	print STDERR "Warning: Tag cutoff is 1, with pvalue of $pval. Tag cutoff of 2 has pvalue $new_pval\, adjust your pvalue cutoff.\n";
	die;
}

$limit = $this_tag_num;

#print "local = $local_limit\n";
#print "global = $limit\n";
$total_matches = 0;
for ($dir = 0; $dir <= 1; $dir++) {
	foreach $chr_input (@chr_array) {
		@id_loc = ();
		open(GET_DATA, "< $inputfile") or die "cannot open $inputfile : $!\n";
		$counter = 0;
		while(defined($line = <GET_DATA>)) {
			chomp $line;
			@a = split(/\t/, $line);
			$chr = $a[0];
			$loc = $a[1];
			$direction = $a[2];
			#$id = $a[3];
			#$local_limit = $id2cutoff{$id};
			if ($chr eq $chr_input) {
				if ($direction == $dir) {
					$id_loc[$counter]->[0] = $loc;
					$id_loc[$counter]->[1] = $direction;
					$counter++;
				}
			}
		}
		$id_loc[$counter]->[0] = 10000000000;
		$stop_point = $#id_loc - $limit;
		for (my $i = 0; $i < $stop_point; $i++) {
			$start_pos = $id_loc[$i]->[0];
			my $j = $i+1;
			$end_pos = $id_loc[$j]->[0];
			$diff = $id_loc[$j]->[0] - $id_loc[$j-1]->[0];
			$range = $end_pos - $start_pos;
			#print "$range\n";
			if ($range < $window) {
				#print FINISHED "$start_pos\t$end_pos\t$range\n";
				while (($end_pos - $start_pos) < $window) {
					$j++;
					$end_pos = $id_loc[$j]->[0];
				}
				$diff = $id_loc[$j]->[0] - $id_loc[$j-1]->[0];
				my $k = $j-1;
				$counter = 0;
				$total_pos = 0;
				for ($j = $i; $j <= $k; $j++) {
					$total_pos += $id_loc[$j]->[0];
					$counter++;
				}
				if ($counter > $limit) {
					$tag_diff = $#id_loc - $i;
					#$max_diff = $max - $ave_pos;
					if ($#id_loc < $tag_window) {
						$min_i = 0;
						$max_i = $#id_loc;
						#print "$max_i\t$#id_loc\n";
					} elsif ($i < $tag_window) {
						$min_i = 0;
						$min_distance = $tag_window - $i;
						$max_location = $min_distance + $tag_window;
						$max_i = $max_location;
						#$max_i = array_find($max_location, \@id_loc);
					} elsif ($tag_diff < $tag_window) {
						$max_i = $#id_loc;
						$max_distance = $max_i - $i;
						$min_location = $max_i - $tag_window + $max_distance;
						$min_i = $min_location;
						#$min_i = array_find($min_location, \@id_loc);
					} else {
						$left1 = $i-$tag_window;
						$left2 = $i;
						$right1 = $i;
						$right2 = $i+$tag_window;
						$left1_loc = $id_loc[$left1]->[0];
						$left2_loc = $id_loc[$left2]->[0];
						$right1_loc = $id_loc[$right1]->[0];
						$right2_loc = $id_loc[$right2]->[0];
						$left_size = $left2_loc - $left1_loc;
						$right_size = $right2_loc - $right1_loc;
						if ($left_size > $right_size) {
							$min_i = $right1;
							$max_i = $right2;
						} else {
							$min_i = $left1;
							$max_i = $left2;
						}
						#$min_location = $i - $tag_window;
						#$max_location = $i + $tag_window;
						#$min_i = $min_location;
						#$max_i = $max_location;
						#$min_i = array_find($min_location, \@id_loc);
						#$max_i = array_find($max_location, \@id_loc);
					}
					$i_diff = $max_i - $min_i + 1;
					$max_loc = $id_loc[$max_i]->[0];
					$min_loc = $id_loc[$min_i]->[0];
					#print "$max_i\t$#id_loc\n";
					$size_diff = $max_loc - $min_loc;
					if ($size_diff < $range_limit) {
						$size_diff = $range_limit;
					}
					#$corrected_diff = floor($i_diff*$tag_corr);
					$corrected_diff = $i_diff;
					$freq = ($corrected_diff/$size_diff) * $window;
					#$freq = ($corrected_diff/$local_window) * $window;
					$pval = 1;
					$this_tag_num = 0;
					while ($pval >= $target_pval) {
						$this_tag_num++;
						$pval = pois($freq, $this_tag_num);	
					}
					#$this_tag_num *= $cutoff_corr;
					$local_limit = $this_tag_num;
					if ($counter > $local_limit) {
						$temp_limit = $limit;
						#$temp_local_limit = $local_limit;
						#$temp_count = $counter;
						while (($counter >= $temp_limit) && ($range <= $range_limit) && ($j < $#id_loc) && ($diff <= $diff_limit)) {							
							$j++;
							$counter++;
							$end_pos = $id_loc[$j]->[0];
							$diff = $id_loc[$j]->[0] - $id_loc[$j-1]->[0];
							$range = $end_pos - $start_pos;
							if ($counter > 100) { 
								#print "Too many tags ($counter) from $start_pos to $end_pos\n";
							} else {
								#$correct_gsize = $total_size;
								$windowed_gsize = $correct_gsize/$range;
								if ($bonf_active == 1) {
									$new_target_pval = $target_pval/$windowed_gsize;
								} else {
									$new_target_pval = $target_pval;
								}
								$frequency = $total_tags/$windowed_gsize;
								$pval = 1;
								$this_tag_num = 0;

								while ($pval >= $new_target_pval) {
									$this_tag_num++;
									#$pval = poisln($frequency, $this_tag_num);
									$pval = pois($frequency, $this_tag_num);
									#$pval = exp($lnpval);
								}
								#$this_tag_num *= $cutoff_corr;
								$temp_limit = $this_tag_num;
							}
							
						}
						
						#$counter--;
						
						$k = $j-2;
						#print FINISHED2 "$k\t";
						$end_pos = $id_loc[$k]->[0];
						$range = $end_pos - $start_pos;
						$counter = 0;
						$total_pos = 0;
						for ($j = $i; $j <= $k; $j++) {
							$total_pos += $id_loc[$j]->[0];
							
							$counter++;
						}
						$temp_counter = $counter;
						$ave_pos = floor($total_pos/$temp_counter);
						$this_start = $ave_pos - 5;
						$this_end = $ave_pos + 4;
						$t_start = $start_pos;
						$t_end = $end_pos;
						
						if ($dir == 0) {
							$direction2 = '+';
						} else {
							$direction2 = '-';
						}
						
						if ($start_pos == $end_pos) {
							$end_pos++;
						}
						if ($start_pos > $end_pos) {
							$start_pos = $t_end;
							$end_pos = $t_start;
						}
						if ($this_start < $start_pos) {
							$this_start = $start_pos;
						}
						if ($this_end > $end_pos) {
							$this_end = $end_pos;
						}
						
						if ($range < 20) {
							$this_start = $start_pos;
							$this_end = $end_pos;
						}
						print FINISHED "$chr_input\t$start_pos\t$end_pos\t$temp_counter\t$dir\n";
						print FINISHED2 "$chr_input\t$start_pos\t$end_pos\tNo_id\t$temp_counter\t$direction2\t$this_start\t$this_end\t0,255,255\n";
						$total_matches++;
					}
					#$total_matches++;
				}
				$i = $k;
			}
		}
		$total_pos = 0;
		$counter = 0;
	}
	close (GET_DATA);
}
print "Total matches = $total_matches\n";
close (GET_DATA);
close (FINISHED);
close (FINISHED2);
exit;

sub gammln {
	my $x = shift;
	my $y = $x;
	my @cof = (76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5);
	my $tmp = $x + 5.5;
	$tmp -= ($x+0.5)*log($tmp);
	my $ser = 1.000000000190015;
	for (my $j = 0; $j <= 5; $j++) {
		$ser += ($cof[$j])/(++$y);
	}
	return -$tmp+log(2.506622746310005*$ser/$x);
}

sub factln {
	my @a = ();
	my $n = shift;
	if ($n < 0) {
		print "Negative factorial\n";
	}
	if ($n <= 1) {
		return 0;
	}
	if ($n <= 100) {
		return $a[$n] ? $a[$n] : ($a[$n] = gammln($n+1));
	} else {
		return gammln($n+1);
	}
}

sub poisln {
	my $freq = $_[0];
	my $target = $_[1];
	my $logfreq = log($freq);
	my $totalp = 0;
	for (my $i = $target; $i >= 0; $i--) {
		$lni = factln($i);
		$lnp = $i * $logfreq - $freq - $lni;
		$p = exp($lnp);
		$totalp += $p;
	}
	$inverse = 1-$totalp;
	return $inverse;
}

sub pois {
	my $f = $_[0];
	my $t = $_[1];
	my $tp = 0;
	$s1 = exp(-1 * $f);
	
	for (my $i = $t; $i >= 0; $i--) {
		$s2 = $f ** $i;
		$s3 = factorial($i);
		$p1 = ($s1 * $s2)/$s3;
		$tp = $tp+$p1;
	}
	$inverse = 1-$tp;
	return $inverse;
}

sub factorial {
	$s = 1;
	$r = 1;
	$input = $_[0];
	while ($s <= $input) {
		$r *= $s;
		$s++;
	}
	if ($input == 0) {
		$r = 1;
	}
return $r;
}
