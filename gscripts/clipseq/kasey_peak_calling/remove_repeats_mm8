#!/usr/bin/perl
#use strict;
use warnings;
use Math::Complex;
use Math::BigInt;
use POSIX qw(ceil floor);

# Initialize variables

#$inputfile = $ARGV[0];
$inputfile2 = $ARGV[0];


$outputfile3 = $ARGV[1];
# Open sequence file (can be very large)
#$ave_window = floor(($window1+$window2)/2);


open(FINISHED_LIST2, ">$outputfile3");
#my @file_data = ();

my @chr_array = ('chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chrX', 'chrY');
#my @chr_array = ('chr22');

open(GET_DATA2, "< $inputfile2") or die "cannot open $inputfile2 : $!\n";
$line = <GET_DATA2>;
print FINISHED_LIST2 "$line";
close(GET_DATA2);

foreach $chr_input (@chr_array) {
	$inputfile = "/nas3/yeolab/Genome/ucsc/mm8/database/".$chr_input."_rmsk.txt.gz";
	open(GET_DATA, "gunzip -c $inputfile |") or die "cannot open $inputfile : $!\n";
	open(GET_DATA2, "< $inputfile2") or die "cannot open $inputfile2 : $!\n";
	@id_loc = ();
	@id_loc2 = ();
	$counter = 0;
	#print "opened first file $chr\n";
	while(defined($line = <GET_DATA>)) {
		#Check for FASTA headers and comments
		chomp $line;
		@a = split(/\t/, $line);
		$chr = $a[5];
		#$pos = floor(($a[6]+$a[7])/2);
		$strand = $a[9];
		$start = $a[6];
		$end = $a[7];
		#$size = $end - $start;
		if ($chr eq $chr_input) {
			$id_loc[$counter]->[0] = $chr;
			$id_loc[$counter]->[1] = $start;
			$id_loc[$counter]->[2] = $end;
			$id_loc[$counter]->[3] = $strand;
			$id_loc[$counter]->[4] = 0;
			$counter++;
		}
	}
	$id_loc[$counter]->[0] = $chr_input;
	$id_loc[$counter]->[1] = 20000000000;
	$id_loc[$counter]->[2] = 20000000001;
	$id_loc[$counter]->[3] = "+";
	$id_loc[$counter]->[4] = 0;
	
	$counter2 = 0;
	#print "opening $chr second file\n";
	$line = <GET_DATA2>;
	while(defined($line = <GET_DATA2>)) {
		chomp $line;
		@a = split(/\t/, $line);
		$chr = $a[0];
		#$pos = floor(($a[1]+$a[2])/2);
		$start = $a[1];
		$end = $a[2];
		$strand = $a[5];
		if ($chr eq $chr_input) {
			#print "positive at $chr\t$start\n";
			$id_loc2[$counter2]->[0] = $chr;
			$id_loc2[$counter2]->[1] = $start;
			$id_loc2[$counter2]->[2] = $end;
			$id_loc2[$counter2]->[3] = $strand;
			$id_loc2[$counter2]->[4] = 0;
			$id_loc2[$counter2]->[5] = $line;
			$counter2++;
		}
	}
	$total_tags = $counter2;
	#$counter2++;
	$id_loc2[$counter2]->[0] = $chr_input;
	$id_loc2[$counter2]->[1] = 10000000000;
	$id_loc2[$counter2]->[2] = 10000000001;
	$id_loc2[$counter2]->[3] = "-";
	$id_loc2[$counter2]->[4] = 0;
	$id_loc2[$counter2]->[5] = "";

	#$size1 = $#id_loc;
	#$size2 = $#id_loc2;
	#print "$size1\t$size2\n";
	$j = 0;
	#$index = 0;
	#print "mapping overlaps\n";
	for ($i = 0; $i < $#id_loc; $i++) {
		$start1 = $id_loc[$i]->[1];
		$end1 = $id_loc[$i]->[2];
		$strand1 = $id_loc[$i]->[3];
		#$printed1 = $id_loc[$i]->[4];
		#$mid1 = floor(($start1+$end1)/2);
		#$size1 = $end1 - $start1;
		
		$start2 = $id_loc2[$j]->[1];
		$end2 = $id_loc2[$j]->[2];
		$strand2 = $id_loc2[$j]->[3];
		$printed2 = $id_loc2[$j]->[4];
		$actual = $id_loc2[$j]->[5];
		$mid2 = floor(($start2+$end2)/2);
		#$size2 = $end2-$start2;
		
		#$diff_mid = $mid1-$mid2;
		while ($mid2 < $start1) {
		#while ($diff_mid > $larger_window) {
			if ($printed2 == 0) {
				print FINISHED_LIST2 "$actual\n";
				$unique_count++;
				$id_loc2[$j]->[4] = 1;
			}
			$j++;
			$start2 = $id_loc2[$j]->[1];
			$end2 = $id_loc2[$j]->[2];
			$strand2 = $id_loc2[$j]->[3];
			$printed2 = $id_loc2[$j]->[4];
			$actual = $id_loc2[$j]->[5];
			$mid2 = floor(($start2+$end2)/2);
			#$diff_mid = $mid1-$mid2;
		}
		
		#$index = $j;
		#$new_mid = $mid1;
		#$new_mid_counter = 1;
		#$overlapped = 0;
		#$diff_pos = $diff_mid;
		#$second_height = 0;
		#while ($start1 < $end2) {
		while (($mid2 <= $end1) && ($mid2 >= $start1)) {
			#print "here with $start2 and $end2 and $strand2 vs $start1 and $end1 and $strand1\n";
			if ($strand1 ne $strand2) {
				#print "here with $strand2 vs $strand1\n";
				if ($printed2 == 0) {
					print FINISHED_LIST2 "$actual\n";
					$unique_count++;
					$id_loc2[$j]->[4] = 1;
					#$printed2 = 1;
				}
			}
			$j++;
			$start2 = $id_loc2[$j]->[1];
			$end2 = $id_loc2[$j]->[2];
			$strand2 = $id_loc2[$j]->[3];
			$printed2 = $id_loc2[$j]->[4];
			$actual = $id_loc2[$j]->[5];
			$mid2 = floor(($start2+$end2)/2);
		}
		#$i--;
		
		#$j = $index;
		
		
	}
	for ($k = $j; $k < $#id_loc2; $k++) {
		$start2 = $id_loc2[$k]->[1];
		$end2 = $id_loc2[$k]->[2];
		$strand = $id_loc2[$k]->[3];
		$printed2 = $id_loc2[$k]->[4];
		$actual = $id_loc2[$k]->[5];
		if ($printed2 == 0) {
			print FINISHED_LIST2 "$actual\n";
			$unique_count++;
			$id_loc2[$k]->[4] = 1;
		}
	}
	#print "$chr_input\t$start2\n";
	close(GET_DATA);
	close(GET_DATA2);
}

print "Total tags = $total_tags\n";
print "Non-rep tags = $unique_count\n";
close(FINISHED_LIST2);
#close(FINISHED);


exit;

sub logHypergeo {
	my ($N, $n1, $n2, $n) = @_;
	my $c3 = bicoln($N, $n2);
	my $P = 0;
    my $AA = ($n1>$n2)?$n2:$n1;
	for (my $i=$n;$i<=$AA;$i++) {
        my $c1 = bicoln($n1, $i);
        my $c2 = bicoln($N-$n1,$n2-$i);
		my $p = (($c1+$c2)-$c3);
		if ($i==$n) {
			$P = $p;
		} else {
			$P += log(1+exp($p-$P));
		}	}
	return $P;
}

sub pvalue {
    my ($N, $n1, $n2, $n) = @_;
    my $c3 = bicoln($N,$n2);
    my $P = 0;
    my $AA = ($n1>$n2)?$n2:$n1;
    for (my $i=$n;$i<=$AA;$i++) {
        my $c1 = bicoln($n1, $i);
        my $c2 = bicoln($N-$n1,$n2-$i);
        $P += exp(($c1+$c2)-$c3);
    }
    return $P;
}

sub gammln {
	my $x = shift;
	my $y = $x;
	my @cof = (76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5);
	my $tmp = $x + 5.5;
	$tmp -= ($x+0.5)*log($tmp);
	my $ser = 1.000000000190015;
	for (my $j = 0; $j <= 5; $j++) {
		$ser += ($cof[$j])/(++$y);
	}
	return -$tmp+log(2.506622746310005*$ser/$x);
}

sub factln {
	my @a = ();
	my $n = shift;
	if ($n < 0) {
		print "Negative factorial\n";
	}
	if ($n <= 1) {
		return 0;
	}
	if ($n <= 100) {
		return $a[$n] ? $a[$n] : ($a[$n] = gammln($n+1));
	} else {
		return gammln($n+1);
	}
}

sub bico {
	my $n = shift;
	my $k = shift;
	return floor(0.5 + exp(factln($n) - factln($k) - factln($n-$k)));
}

sub bicoln {
    my ($nn, $k) = @_;
    #return log(floor(0.5+exp(factln($nn)-factln($k)-factln($nn-$k))));
    return factln($nn)-factln($k)-factln($nn-$k);
}

