#!/usr/bin/perl
#use strict;
use warnings;
use POSIX;
# Initialize variables

#$lane = $ARGV[0];
#$window = $ARGV[1];
#$target_pval = 0.00001;

$inputfile = $ARGV[0];
$outputfile = $ARGV[1];
$shift_pos = $ARGV[2];
#$inputfile = "LIN28_ES_comb.ingenes.BED";
#$outputfile = "LIN28_ES_comb_ingenes_sorted";
#$outputfile2 = $inputfile."_ingenes_histo";
# Open sequence file (can be very large)
open(FINISHED, ">$outputfile");
#open(FINISHED2, ">$outputfile2");

my @chr_array = ('chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY');
#my @chr_array = ('chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chrX', 'chrY');
#my @chr_array = ('chrY');

#@pos_distribution = ();
#@neg_distribution = ();

foreach $chr_input (@chr_array) {
	#$inputfile = "LIN28_ES_comb.".$chr_input.".bowtie";
	print "$chr_input\n";
	#@list = ();
	@pos_list = ();
	#@neg_list = ();
	#%strand = ();
	open(GET_DATA, "< $inputfile") or die "cannot open $inputfile : $!\n";
	#$chr_size = $chr_max{$chr_input};
	#$genome_size += $chr_size;
	#$line = <GET_DATA>;
	while(defined($line = <GET_DATA>)) {
		if ($line =~ /^track/) { } else {
		chomp $line;
		@a = split(/\t/, $line);
		#@b = split(/\|/, $a[3]);
		#$b[0] =~ /.*\,(\d+)/;
		#$id = $1;
		#$start = $b[1];
		#$end = $b[2];
		$this_chr = $a[0];
		$this_start = $a[1];
		$this_end = $a[2];
		$loc = floor(($this_start+$this_end)/2);
		#$chr = $id_annotation{$id}->[0];
		#$start = $id_annotation{$id}->[1];
		#$end = $id_annotation{$id}->[2];
		#$id_direction = $id_annotation{$id}->[3];
		#$size = $id_annotation{$id}->[4];
		#$id_size = $end - $start + 1;
		#$this_pos = $a[3];
		if ($a[5] eq "+") {
			if ($this_chr eq $chr_input) {
				$this_start += $shift_pos;
				$this_end += $shift_pos;
				$loc = floor(($this_start+$this_end)/2);
				$tag_direction = 0;
				#$loc = $this_start;
				#$this_pos = $this_start - $start;
				#$relative_loc = floor(($this_pos/$id_size)*100);
				#print "$relative_loc\n";
				#print "$this_start\t$this_end\t$start\t$end\t$tag_direction\t$id\n";
				#$pos_distribution[$relative_loc]++;
				push(@pos_list, $loc);
				$dir_hash{$loc}->[$tag_direction] = 1;
				#$pos_loc2id{$loc} = $id;
				#$id_relative{$id}->[$relative_loc]++;
				$pos_tags++;
				#print FINISHED "$chr_input\t$this_start\t$tag_direction\n";
				
			}
		} else {
			if ($this_chr eq $chr_input) {
				$this_start -= $shift_pos;
				$this_end -= $shift_pos;
				$loc = floor(($this_start+$this_end)/2);
				$tag_direction = 1;
				#$this_pos = $end - $this_end;
				#$relative_loc = floor(($this_pos/$id_size)*100);
				#$pos_distribution[$relative_loc]++;
				push(@pos_list, $loc);
				$dir_hash{$loc}->[$tag_direction] = 1;
				#$pos_loc2id{$loc} = $id;
				#$id_relative{$id}->[$relative_loc]++;
				$pos_tags++;
				#print FINISHED "$chr_input\t$this_start\t$tag_direction\n";
			}
		}
		}
	}
	@pos_sorted = sort {$a <=> $b} @pos_list;
	#@neg_sorted = sort {$a <=> $b} @neg_list;
	#$current_loc = 0;
	for ($i = 0; $i <= $#pos_sorted; $i++) {
		$loc = $pos_sorted[$i];
		if (exists($dir_hash{$loc}->[0])) {
			print FINISHED "$chr_input\t$loc\t0\n";
		}
		if (exists($dir_hash{$loc}->[1])) {
			print FINISHED "$chr_input\t$loc\t1\n";
		}
		#$id = $pos_loc2id{$loc};		
		#print FINISHED "$chr_input\t$loc\t0\t$id\n";
				
	}
	#%pos_loc2id = ();
	#%neg_loc2id = ();
	$pos_list_size += $#pos_sorted;
	#$neg_list_size += $#neg_sorted;
	close (GET_DATA);
}

$total_tags = $pos_list_size;


#$correct_gsize = $genome_size - $N_size - $rep10_size;
#$windowed_gsize = $correct_gsize/$window;
#$frequency = $total_tags/$windowed_gsize;
print "Positive tags = $pos_tags\n";
print "Positive list = $pos_list_size\n";
#print "Negative tags = $neg_tags\n";
#print "Negative list = $neg_list_size\n";
#print "Frequency per $window = $frequency\n";
#$this_size = $#list;
print "Total tags = $total_tags\n";

close (GET_DATA);
close (FINISHED);

exit;

sub gammln {
	my $x = shift;
	my $y = $x;
	my @cof = (76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5);
	my $tmp = $x + 5.5;
	$tmp -= ($x+0.5)*log($tmp);
	my $ser = 1.000000000190015;
	for (my $j = 0; $j <= 5; $j++) {
		$ser += ($cof[$j])/(++$y);
	}
	return -$tmp+log(2.506622746310005*$ser/$x);
}

sub factln {
	my @a = ();
	my $n = shift;
	if ($n < 0) {
		print "Negative factorial\n";
	}
	if ($n <= 1) {
		return 0;
	}
	if ($n <= 100) {
		return $a[$n] ? $a[$n] : ($a[$n] = gammln($n+1));
	} else {
		return gammln($n+1);
	}
}

sub poisln {
	my $freq = $_[0];
	my $target = $_[1];
	my $logfreq = log($freq);
	my $totalp = 0;
	for ($i = $target; $i >= 0; $i--) {
		$lni = factln($i);
		$lnp = $i * $logfreq - $freq - $lni;
		$p = exp($lnp);
		$totalp += $p;
	}
	$inverse = 1-$totalp;
	return $inverse;
}

sub pois {
	my $f = $_[0];
	my $t = $_[1];
	my $tp = 0;
	$s1 = exp(-1 * $f);
	
	for ($i = $t; $i >= 0; $i--) {
		$s2 = $f ** $i;
		$s3 = factorial($i);
		$p1 = ($s1 * $s2)/$s3;
		$tp = $tp+$p1;
	}
	$inverse = 1-$tp;
	return $inverse;
}

sub factorial {
	$s = 1;
	$r = 1;
	$input = $_[0];
	while ($s <= $input) {
		$r *= $s;
		$s++;
	}
	if ($input == 0) {
		$r = 1;
	}
return $r;
}
